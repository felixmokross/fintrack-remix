datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password              Password?
  accounts              Account[]
  assetClass            AssetClass[]
  accountGroup          AccountGroup[]
  stock                 Stock[]
  incomeExpenseCategory IncomeExpenseCategory[]
  transaction           Transaction[]
  booking               Booking[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Account {
  id   String      @default(cuid())
  name String
  type AccountType @default(ASSET)

  assetClass   AssetClass? @relation(fields: [assetClassId, userId], references: [id, userId], onDelete: Restrict)
  assetClassId String?

  group   AccountGroup? @relation(fields: [groupId, userId], references: [id, userId], onDelete: Restrict)
  groupId String?

  unit AccountUnit @default(CURRENCY)

  currency String?

  stock   Stock?  @relation(fields: [stockId, userId], references: [id, userId], onDelete: Restrict)
  stockId String?

  preExisting Boolean @default(false)

  balanceAtStart Decimal?

  openingDate DateTime? @db.Date
  closingDate DateTime? @db.Date

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  booking Booking[]

  @@id([id, userId])
}

enum AccountUnit {
  CURRENCY
  STOCK
}

enum AccountType {
  ASSET
  LIABILITY
}

model AssetClass {
  id        String    @default(cuid())
  name      String
  sortOrder Int       @default(0)
  account   Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  @@id([id, userId])
}

model AccountGroup {
  id      String    @default(cuid())
  name    String
  account Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  @@id([id, userId])
}

model Stock {
  id              String    @default(cuid())
  symbol          String
  tradingCurrency String
  account         Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  @@id([id, userId])
}

model IncomeExpenseCategory {
  id   String                    @default(cuid())
  name String
  type IncomeExpenseCategoryType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId   String
  bookings Booking[]

  @@id([id, userId])
}

enum IncomeExpenseCategoryType {
  INCOME
  EXPENSE
}

model Transaction {
  id   String   @default(cuid())
  date DateTime @db.Date
  note String?

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  @@id([id, userId])
}

model Booking {
  id   String      @default(cuid())
  type BookingType

  note String?

  account   Account? @relation(fields: [accountId, userId], references: [id, userId], onDelete: Restrict)
  accountId String?

  transaction   Transaction @relation(fields: [transactionId, userId], references: [id, userId], onDelete: Cascade)
  transactionId String

  incomeExpenseCategory   IncomeExpenseCategory? @relation(fields: [incomeExpenseCategoryId, userId], references: [id, userId], onDelete: Restrict)
  incomeExpenseCategoryId String?

  currency String?

  amount Decimal

  sortOrder Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  @@id([id, userId])
}

enum BookingType {
  CHARGE
  DEPOSIT
  INCOME
  EXPENSE
  APPRECIATION
  DEPRECIATION
}
