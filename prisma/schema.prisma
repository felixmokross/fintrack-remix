datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password     Password?
  accounts     Account[]
  AssetClass   AssetClass[]
  AccountGroup AccountGroup[]
  Stock        Stock[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Account {
  id   String      @id @default(cuid())
  name String
  type AccountType @default(ASSET)

  assetClass   AssetClass? @relation(fields: [assetClassId], references: [id], onDelete: Restrict)
  assetClassId String?

  group   AccountGroup? @relation(fields: [groupId], references: [id], onDelete: Restrict)
  groupId String?

  unit AccountUnit @default(CURRENCY)

  currency String?

  stock   Stock?  @relation(fields: [stockId], references: [id], onDelete: Restrict)
  stockId String?

  preExisting Boolean @default(false)

  balanceAtStart Decimal?

  openingDate DateTime? @db.Date
  closingDate DateTime? @db.Date

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String
}

enum AccountUnit {
  CURRENCY
  STOCK
}

enum AccountType {
  ASSET
  LIABILITY
}

model AssetClass {
  id        String    @id @default(cuid())
  name      String
  sortOrder Int       @default(0)
  Account   Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String
}

model AccountGroup {
  id      String    @id @default(cuid())
  name    String
  Account Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String
}

model Stock {
  id              String    @id
  tradingCurrency String
  Account         Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String
}
